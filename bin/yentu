#!/usr/bin/env php
<?php
error_reporting(E_ALL ^ E_NOTICE);
require "vendor/autoload.php";

use clearice\ClearIce;
use yentu\Yentu;

ClearIce::addCommands(
    array(
        'command' => 'import',
        'help' => 'import the schema of an existing database into a yentu migration'
    ), 
    array(
        'command' => 'migrate',
        'help' => 'run new migrations on the target database'
    ), 
    array(
        'command' => 'init',
        'help' => 'initialize the current directory (or the one specified through the  --home option) with yentu'
    ), 
    array(
        'command' => 'create',
        'help' => 'create a new migration'
    ),
    array(
        'command' => 'rollback',
        'help' => 'rollback the previus migration which was run on the database'
    ),
    array(
        'command' => 'status',
        'help' => 'display the current status of the migrations'
    )
);

ClearIce::addOptions(
    array(
        'command' => 'import',
        'short' => 'd',
        'long' => 'skip-defaults',
        'help' => 'do not import the default values of the columns'
    ),
    array(
        'command' => 'init',
        'short' => 'i',
        'long' => 'interractive', 
        'help' => 'initialize yentu interractively'
    ),
    array(
        'command' => 'init',
        'short' => 'd',
        'long' => 'driver',
        'help' => 'database platform. Supports postgresql',
        'has_value' => true
    ),
    array(
        'command' => 'init',
        'short' => 'h',
        'long' => 'host',
        'help' => 'the hostname of the target database',
        'has_value' => true
    ),
    array(
        'command' => 'init',
        'short' => 'p',
        'long' => 'port',
        'help' => 'the port of the target database',
        'has_value' => true
    ),        
    array(
        'command' => 'init',
        'short' => 'n',
        'long' => 'dbname',
        'help' => 'the name of the target database',
        'has_value' => true
    ),        
    array(
        'command' => 'init',
        'short' => 'u',
        'long' => 'user',
        'help' => 'the user name on the target database',
        'has_value' => true
    ),        
    array(
        'command' => 'init',
        'short' => 'p',
        'long' => 'password',
        'help' => 'the passwrd of the user on the target database',
        'has_value' => true
    )
);

ClearIce::addOptions(
    array(
        'command' => 'migrate',
        'long' => 'ignore-foreign-keys',
        'help' => 'do not apply any database constraints'
    ),
    array(
        'command' => 'migrate',
        'long' => 'foreign-keys-only',
        'help' => 'apply only database constraints'
    )
);

ClearIce::addOptions(
    array(
        'short' => 'h',
        'long' => 'home',
        'help' => 'specifies where the yentu configurations are found',
        'has_value' => true
    ),
    array(
        'short' => 'v',
        'long' => 'verbose',
        'help' => 'set level of verbosity. high, mid, low and none',
        'has_value' => true
    )
);

ClearIce::addOptions(
    array(
        'long' => 'details',
        'help' => 'show details of all migrations.',
        'command' => 'status'
    )
);

ClearIce::setDescription("\nYentu Database Migrations\nYentu allows you to keep track of changes to your database schema through your source countrol system.");
ClearIce::setFootnote("Report bugs to jainooson@gmail.com\n");

ClearIce::addHelp();
ClearIce::setStrict(true);
$options = ClearIce::parse();

if(isset($options['verbose']))
{
    Yentu::setOutputLevel($options['verbose']);
}

$welcome = <<<WELCOME

Yentu Database Migrations.
By James Ekow Abaka Ainooson

WELCOME;
Yentu::out($welcome);

try{
    if($options['__command__'])
    {
        if($options['home']) Yentu::setDefaultHome($options['home']);
        
        $class = "\\yentu\\commands\\" . ucfirst($options['__command__']);
        unset($options['__command__']);
        $command = new $class();
        $command->run($options);
    }
    else
    {
        ClearIce::output(ClearIce::getHelpMessage());
    }
}
catch(\yentu\commands\CommandError $e)
{
    fputs(
        STDERR, 
        "\nThere was an error executing your command: " . $e->getMessage() . "\n"
    );
}
catch(\yentu\DatabaseManipulatorException $e)
{
    fputs(
        STDERR,
        "\n\nFailed to perform database action: " . $e->getMessage() . "\n"
    );
    rollback_changes();
}
catch (\yentu\SyntaxErrorException $e)
{
    ClearIce::error("\n\nError found in syntax: {$e->getMessage()}\n");
    rollback_changes();
}
catch(\PDOException $e)
{
    ClearIce::error("\n\nFailed to connect to database:" . $e->getMessage() . "\n");
}

function rollback_changes()
{
    if(\yentu\ChangeLogger::getChanges() > 0)
    {
        Yentu::out("\nAttempting to rollback all changes ... ");
        Yentu::setOutputLevel(0);
        $rollback = new \yentu\commands\Rollback();
        $rollback->run(array());
        Yentu::setOutputLevel(1);        
        Yentu::out("OK\n");
    }    
}

ClearIce::output("\n");
